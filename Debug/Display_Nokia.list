
Display_Nokia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee0  08003ee0  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ee8  08003ee8  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08003ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000234  08004124  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08004124  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f83c  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023fc  00000000  00000000  0002faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00031ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00032bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225e2  00000000  00000000  000337c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103c0  00000000  00000000  00055daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0553  00000000  00000000  0006616a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001366bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a8  00000000  00000000  00136710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000234 	.word	0x20000234
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003a6c 	.word	0x08003a6c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000238 	.word	0x20000238
 8000200:	08003a6c 	.word	0x08003a6c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <LCD5110_init>:

// =============================================================================================================================
// === Funções ===

void LCD5110_init(LCD_HandleTypeDef *hlcd5110)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	// phspi irá apontar pro endereço de dados da SPI escolhida
	lcd = hlcd5110;
 8000504:	4a45      	ldr	r2, [pc, #276]	; (800061c <LCD5110_init+0x120>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6013      	str	r3, [r2, #0]

	//inicialização do buf
	buf.ocupacao=0;
 800050a:	4b45      	ldr	r3, [pc, #276]	; (8000620 <LCD5110_init+0x124>)
 800050c:	2200      	movs	r2, #0
 800050e:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
	buf.status=B_FREE;
 8000512:	4b43      	ldr	r3, [pc, #268]	; (8000620 <LCD5110_init+0x124>)
 8000514:	2200      	movs	r2, #0
 8000516:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

	// inicialização dos pinos de CS e de DS
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 1);
 800051a:	4b40      	ldr	r3, [pc, #256]	; (800061c <LCD5110_init+0x120>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	6898      	ldr	r0, [r3, #8]
 8000520:	4b3e      	ldr	r3, [pc, #248]	; (800061c <LCD5110_init+0x120>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	899b      	ldrh	r3, [r3, #12]
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	f001 fcb3 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, 1);
 800052e:	4b3b      	ldr	r3, [pc, #236]	; (800061c <LCD5110_init+0x120>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	6918      	ldr	r0, [r3, #16]
 8000534:	4b39      	ldr	r3, [pc, #228]	; (800061c <LCD5110_init+0x120>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	8a9b      	ldrh	r3, [r3, #20]
 800053a:	2201      	movs	r2, #1
 800053c:	4619      	mov	r1, r3
 800053e:	f001 fca9 	bl	8001e94 <HAL_GPIO_WritePin>

	// reset do display
	HAL_GPIO_WritePin(lcd->RS_Port, lcd->RS_Pin, 0);
 8000542:	4b36      	ldr	r3, [pc, #216]	; (800061c <LCD5110_init+0x120>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6998      	ldr	r0, [r3, #24]
 8000548:	4b34      	ldr	r3, [pc, #208]	; (800061c <LCD5110_init+0x120>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	8b9b      	ldrh	r3, [r3, #28]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f001 fc9f 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fe40 	bl	80011dc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RS_Port, lcd->RS_Pin, 1);
 800055c:	4b2f      	ldr	r3, [pc, #188]	; (800061c <LCD5110_init+0x120>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6998      	ldr	r0, [r3, #24]
 8000562:	4b2e      	ldr	r3, [pc, #184]	; (800061c <LCD5110_init+0x120>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	8b9b      	ldrh	r3, [r3, #28]
 8000568:	2201      	movs	r2, #1
 800056a:	4619      	mov	r1, r3
 800056c:	f001 fc92 	bl	8001e94 <HAL_GPIO_WritePin>

	// seleciona o modo de transmmissão
	switch(lcd->Mode)
 8000570:	4b2a      	ldr	r3, [pc, #168]	; (800061c <LCD5110_init+0x120>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d00e      	beq.n	8000598 <LCD5110_init+0x9c>
 800057a:	2b02      	cmp	r3, #2
 800057c:	dc10      	bgt.n	80005a0 <LCD5110_init+0xa4>
 800057e:	2b00      	cmp	r3, #0
 8000580:	d002      	beq.n	8000588 <LCD5110_init+0x8c>
 8000582:	2b01      	cmp	r3, #1
 8000584:	d004      	beq.n	8000590 <LCD5110_init+0x94>
 8000586:	e00b      	b.n	80005a0 <LCD5110_init+0xa4>
	{
		case LCD_BLK:
			LCD_write = LCD_write_BLK;
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <LCD5110_init+0x128>)
 800058a:	4a27      	ldr	r2, [pc, #156]	; (8000628 <LCD5110_init+0x12c>)
 800058c:	601a      	str	r2, [r3, #0]
			break;
 800058e:	e007      	b.n	80005a0 <LCD5110_init+0xa4>

		case LCD_IT:
			LCD_write = LCD_write_IT;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <LCD5110_init+0x128>)
 8000592:	4a26      	ldr	r2, [pc, #152]	; (800062c <LCD5110_init+0x130>)
 8000594:	601a      	str	r2, [r3, #0]
			break;
 8000596:	e003      	b.n	80005a0 <LCD5110_init+0xa4>

		case LCD_DMA:
			LCD_write = LCD_write_DMA;
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <LCD5110_init+0x128>)
 800059a:	4a25      	ldr	r2, [pc, #148]	; (8000630 <LCD5110_init+0x134>)
 800059c:	601a      	str	r2, [r3, #0]
			break;
 800059e:	bf00      	nop
	}

	// limpa o display
	LCD5110_clear();
 80005a0:	f000 f9b0 	bl	8000904 <LCD5110_clear>

	buf.dado[0] = 0x21;
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <LCD5110_init+0x124>)
 80005a6:	2221      	movs	r2, #33	; 0x21
 80005a8:	701a      	strb	r2, [r3, #0]
	buf.dado[1] = 0xc6;
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <LCD5110_init+0x124>)
 80005ac:	22c6      	movs	r2, #198	; 0xc6
 80005ae:	705a      	strb	r2, [r3, #1]
	buf.dado[2] = 0x06;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <LCD5110_init+0x124>)
 80005b2:	2206      	movs	r2, #6
 80005b4:	709a      	strb	r2, [r3, #2]
	buf.dado[3] = 0x13;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <LCD5110_init+0x124>)
 80005b8:	2213      	movs	r2, #19
 80005ba:	70da      	strb	r2, [r3, #3]
	buf.dado[4] = 0x20;
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <LCD5110_init+0x124>)
 80005be:	2220      	movs	r2, #32
 80005c0:	711a      	strb	r2, [r3, #4]
	buf.dado[5] = 0x0c;
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <LCD5110_init+0x124>)
 80005c4:	220c      	movs	r2, #12
 80005c6:	715a      	strb	r2, [r3, #5]
	buf.ocupacao = 6;
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <LCD5110_init+0x124>)
 80005ca:	2206      	movs	r2, #6
 80005cc:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
	buf.status = B_BUSY;
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <LCD5110_init+0x124>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

	while(__HAL_SPI_GET_FLAG(lcd->hspi, SPI_FLAG_BSY)){};
 80005d8:	bf00      	nop
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <LCD5110_init+0x120>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e8:	2b80      	cmp	r3, #128	; 0x80
 80005ea:	d0f6      	beq.n	80005da <LCD5110_init+0xde>

	LCD_write_IT(buf.dado, buf.ocupacao, 0);
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <LCD5110_init+0x124>)
 80005ee:	f8b3 31fa 	ldrh.w	r3, [r3, #506]	; 0x1fa
 80005f2:	2200      	movs	r2, #0
 80005f4:	4619      	mov	r1, r3
 80005f6:	480a      	ldr	r0, [pc, #40]	; (8000620 <LCD5110_init+0x124>)
 80005f8:	f000 f87a 	bl	80006f0 <LCD_write_IT>

	while(__HAL_SPI_GET_FLAG(lcd->hspi, SPI_FLAG_BSY)){};
 80005fc:	bf00      	nop
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <LCD5110_init+0x120>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060c:	2b80      	cmp	r3, #128	; 0x80
 800060e:	d0f6      	beq.n	80005fe <LCD5110_init+0x102>

}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000250 	.word	0x20000250
 8000620:	20000254 	.word	0x20000254
 8000624:	20000450 	.word	0x20000450
 8000628:	08000661 	.word	0x08000661
 800062c:	080006f1 	.word	0x080006f1
 8000630:	08000761 	.word	0x08000761

08000634 <LCD5110_write>:
 *
 */


HAL_StatusTypeDef LCD5110_write(uint8_t *data, uint16_t tam)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;

	// Agora será transmitido um bloco de tamanho tam de dados
	status = LCD_write(data, tam, 1);
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <LCD5110_write+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	8879      	ldrh	r1, [r7, #2]
 8000646:	2201      	movs	r2, #1
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	4798      	blx	r3
 800064c:	4603      	mov	r3, r0
 800064e:	73fb      	strb	r3, [r7, #15]

	return status;
 8000650:	7bfb      	ldrb	r3, [r7, #15]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000450 	.word	0x20000450

08000660 <LCD_write_BLK>:

HAL_StatusTypeDef LCD_write_BLK(uint8_t *data, uint16_t tam, uint8_t mode)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	807b      	strh	r3, [r7, #2]
 800066c:	4613      	mov	r3, r2
 800066e:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status;

	// testa se a SPI está livre
	if(__HAL_SPI_GET_FLAG(lcd->hspi, SPI_FLAG_BSY))
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <LCD_write_BLK+0x88>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	2b80      	cmp	r3, #128	; 0x80
 8000680:	d101      	bne.n	8000686 <LCD_write_BLK+0x26>
		return HAL_BUSY;
 8000682:	2302      	movs	r3, #2
 8000684:	e02c      	b.n	80006e0 <LCD_write_BLK+0x80>

	// define se é dado ou comando
	HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, mode);
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <LCD_write_BLK+0x88>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	6918      	ldr	r0, [r3, #16]
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <LCD_write_BLK+0x88>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	8a9b      	ldrh	r3, [r3, #20]
 8000692:	787a      	ldrb	r2, [r7, #1]
 8000694:	4619      	mov	r1, r3
 8000696:	f001 fbfd 	bl	8001e94 <HAL_GPIO_WritePin>

	// habilita o chip select
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 0);
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <LCD_write_BLK+0x88>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6898      	ldr	r0, [r3, #8]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <LCD_write_BLK+0x88>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	899b      	ldrh	r3, [r3, #12]
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	f001 fbf3 	bl	8001e94 <HAL_GPIO_WritePin>

	// Agora o bloco será transmitido por interrupção
	status = HAL_SPI_Transmit(lcd->hspi, data, tam, 200);
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <LCD_write_BLK+0x88>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	887a      	ldrh	r2, [r7, #2]
 80006b6:	23c8      	movs	r3, #200	; 0xc8
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	f002 f96e 	bl	800299a <HAL_SPI_Transmit>
 80006be:	4603      	mov	r3, r0
 80006c0:	73fb      	strb	r3, [r7, #15]

	// levanta o chip select
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 1);
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <LCD_write_BLK+0x88>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6898      	ldr	r0, [r3, #8]
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <LCD_write_BLK+0x88>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	899b      	ldrh	r3, [r3, #12]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	f001 fbdf 	bl	8001e94 <HAL_GPIO_WritePin>

	// libera o buffer
	buf.status = B_FREE;
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <LCD_write_BLK+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

	return status;
 80006de:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000250 	.word	0x20000250
 80006ec:	20000254 	.word	0x20000254

080006f0 <LCD_write_IT>:

HAL_StatusTypeDef LCD_write_IT(uint8_t *data, uint16_t tam, uint8_t mode)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
 80006fc:	4613      	mov	r3, r2
 80006fe:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status;

	// testa se a SPI está livre
	if(__HAL_SPI_GET_FLAG(lcd->hspi, SPI_FLAG_BSY))
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <LCD_write_IT+0x6c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	2b80      	cmp	r3, #128	; 0x80
 8000710:	d101      	bne.n	8000716 <LCD_write_IT+0x26>
		return HAL_BUSY;
 8000712:	2302      	movs	r3, #2
 8000714:	e01e      	b.n	8000754 <LCD_write_IT+0x64>

	// define se é dado ou comando
	HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, mode);
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <LCD_write_IT+0x6c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6918      	ldr	r0, [r3, #16]
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <LCD_write_IT+0x6c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	8a9b      	ldrh	r3, [r3, #20]
 8000722:	787a      	ldrb	r2, [r7, #1]
 8000724:	4619      	mov	r1, r3
 8000726:	f001 fbb5 	bl	8001e94 <HAL_GPIO_WritePin>

	// habilita o chip select
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 0);
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <LCD_write_IT+0x6c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6898      	ldr	r0, [r3, #8]
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <LCD_write_IT+0x6c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	899b      	ldrh	r3, [r3, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	f001 fbab 	bl	8001e94 <HAL_GPIO_WritePin>

	// Agora o bloco será transmitido por interrupção
	status = HAL_SPI_Transmit_IT(lcd->hspi, data, tam);
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <LCD_write_IT+0x6c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	887a      	ldrh	r2, [r7, #2]
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	4618      	mov	r0, r3
 800074a:	f002 fa63 	bl	8002c14 <HAL_SPI_Transmit_IT>
 800074e:	4603      	mov	r3, r0
 8000750:	73fb      	strb	r3, [r7, #15]

	return status;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000250 	.word	0x20000250

08000760 <LCD_write_DMA>:

HAL_StatusTypeDef LCD_write_DMA(uint8_t *data, uint16_t tam, uint8_t mode)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
 800076c:	4613      	mov	r3, r2
 800076e:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status;

	// testa se a SPI está livre
	if(__HAL_SPI_GET_FLAG(lcd->hspi, SPI_FLAG_BSY))
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <LCD_write_DMA+0x6c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	2b80      	cmp	r3, #128	; 0x80
 8000780:	d101      	bne.n	8000786 <LCD_write_DMA+0x26>
		return HAL_BUSY;
 8000782:	2302      	movs	r3, #2
 8000784:	e01e      	b.n	80007c4 <LCD_write_DMA+0x64>

	// define se é dado ou comando
	HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, mode);
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <LCD_write_DMA+0x6c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6918      	ldr	r0, [r3, #16]
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <LCD_write_DMA+0x6c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	8a9b      	ldrh	r3, [r3, #20]
 8000792:	787a      	ldrb	r2, [r7, #1]
 8000794:	4619      	mov	r1, r3
 8000796:	f001 fb7d 	bl	8001e94 <HAL_GPIO_WritePin>

	// habilita o chip select
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 0);
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <LCD_write_DMA+0x6c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6898      	ldr	r0, [r3, #8]
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <LCD_write_DMA+0x6c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	899b      	ldrh	r3, [r3, #12]
 80007a6:	2200      	movs	r2, #0
 80007a8:	4619      	mov	r1, r3
 80007aa:	f001 fb73 	bl	8001e94 <HAL_GPIO_WritePin>

	// Agora o bloco será transmitido por interrupção
	status = HAL_SPI_Transmit_DMA(lcd->hspi, data, tam);
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <LCD_write_DMA+0x6c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	887a      	ldrh	r2, [r7, #2]
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fab5 	bl	8002d28 <HAL_SPI_Transmit_DMA>
 80007be:	4603      	mov	r3, r0
 80007c0:	73fb      	strb	r3, [r7, #15]

	return status;
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000250 	.word	0x20000250

080007d0 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == lcd->hspi->Instance)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_SPI_TxCpltCallback+0x3c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d10d      	bne.n	8000804 <HAL_SPI_TxCpltCallback+0x34>
	{
		// levanta o chip select, pois a transmissão acabou
		HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 1);
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_SPI_TxCpltCallback+0x3c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	6898      	ldr	r0, [r3, #8]
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <HAL_SPI_TxCpltCallback+0x3c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f001 fb4c 	bl	8001e94 <HAL_GPIO_WritePin>
		// libera o buffer
		buf.status = B_FREE;
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <HAL_SPI_TxCpltCallback+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	}
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000250 	.word	0x20000250
 8000810:	20000254 	.word	0x20000254

08000814 <LCD_draw_char>:
 * 			- constroi os dados de cada caractere
 *
 */

void LCD_draw_char(char letra, uint8_t *buf)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	letra -= ' ';
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	3b20      	subs	r3, #32
 8000824:	71fb      	strb	r3, [r7, #7]

	// pega o byte da biblioteca fonte6_8 e salva no Buffer dado
	for(i=0;i<LARGFONTE;i++)
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
 800082a:	e011      	b.n	8000850 <LCD_draw_char+0x3c>
	{
		*buf = font6_8[(uint8_t)letra][i];
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	7bf9      	ldrb	r1, [r7, #15]
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <LCD_draw_char+0x50>)
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4403      	add	r3, r0
 800083c:	440b      	add	r3, r1
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	701a      	strb	r2, [r3, #0]
		buf++;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	603b      	str	r3, [r7, #0]
	for(i=0;i<LARGFONTE;i++)
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	3301      	adds	r3, #1
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b05      	cmp	r3, #5
 8000854:	d9ea      	bls.n	800082c <LCD_draw_char+0x18>
	}
}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	20000000 	.word	0x20000000

08000868 <LCD_draw_string>:

uint16_t LCD_draw_string(char *s)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	uint8_t *c;
	uint16_t tamanho=0;
 8000870:	2300      	movs	r3, #0
 8000872:	817b      	strh	r3, [r7, #10]


	// aponta para o vetor dos dados do caractere
	c=buf.dado;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <LCD_draw_string+0x44>)
 8000876:	60fb      	str	r3, [r7, #12]

	// passa pela string pedida até encontrar o seu final
  	while(*s!='\0')
 8000878:	e00e      	b.n	8000898 <LCD_draw_string+0x30>
	{
  		// monta caractere por caractere no Buffer, apontado por c
  		LCD_draw_char(*s, c);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	68f9      	ldr	r1, [r7, #12]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffc7 	bl	8000814 <LCD_draw_char>
		s++;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
		c+=LARGFONTE;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3306      	adds	r3, #6
 8000890:	60fb      	str	r3, [r7, #12]
		tamanho+=LARGFONTE; // define quantos caracteres foram passados
 8000892:	897b      	ldrh	r3, [r7, #10]
 8000894:	3306      	adds	r3, #6
 8000896:	817b      	strh	r3, [r7, #10]
  	while(*s!='\0')
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1ec      	bne.n	800087a <LCD_draw_string+0x12>
	}

  	return tamanho;
 80008a0:	897b      	ldrh	r3, [r7, #10]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000254 	.word	0x20000254

080008b0 <LCD5110_write_str>:

HAL_StatusTypeDef LCD5110_write_str(char *s)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	// testa o estado do buffer
	if(buf.status==B_BUSY)
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <LCD5110_write_str+0x4c>)
 80008ba:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d101      	bne.n	80008c6 <LCD5110_write_str+0x16>
		return HAL_BUSY; //retorna que o buffer está ocupado
 80008c2:	2302      	movs	r3, #2
 80008c4:	e016      	b.n	80008f4 <LCD5110_write_str+0x44>

	// atualiza o status do buffer
	buf.status=B_BUSY;
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <LCD5110_write_str+0x4c>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

	// preenche o Buffer com os dados de cada caractere e retorna o tamanho final
	buf.ocupacao=LCD_draw_string(s);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffca 	bl	8000868 <LCD_draw_string>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <LCD5110_write_str+0x4c>)
 80008da:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa

	// manda os dados da string à funçâo de escrever no display
	status = LCD_write(buf.dado, buf.ocupacao, 1);
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <LCD5110_write_str+0x50>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a06      	ldr	r2, [pc, #24]	; (80008fc <LCD5110_write_str+0x4c>)
 80008e4:	f8b2 11fa 	ldrh.w	r1, [r2, #506]	; 0x1fa
 80008e8:	2201      	movs	r2, #1
 80008ea:	4804      	ldr	r0, [pc, #16]	; (80008fc <LCD5110_write_str+0x4c>)
 80008ec:	4798      	blx	r3
 80008ee:	4603      	mov	r3, r0
 80008f0:	73fb      	strb	r3, [r7, #15]

	// atualiza o status do buffer (para modo pooling)
	//buf.status=B_FREE;

	return status;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000254 	.word	0x20000254
 8000900:	20000450 	.word	0x20000450

08000904 <LCD5110_clear>:
// -----------------------------------------------------------------------------------------------------------------------------



HAL_StatusTypeDef LCD5110_clear()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	// testa o estado do buffer
	if(buf.status==B_BUSY)
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <LCD5110_clear+0x38>)
 800090c:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8000910:	2b01      	cmp	r3, #1
 8000912:	d101      	bne.n	8000918 <LCD5110_clear+0x14>
		return HAL_BUSY; //retorna que o buffer está ocupado
 8000914:	2302      	movs	r3, #2
 8000916:	e00d      	b.n	8000934 <LCD5110_clear+0x30>

	buf.status = HAL_BUSY;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <LCD5110_clear+0x38>)
 800091a:	2202      	movs	r2, #2
 800091c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
	// limpa o display escrevendo 0 em todos os pixels
	status = LCD_write(TelaLimpa, TAMTELA, 1);
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <LCD5110_clear+0x3c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <LCD5110_clear+0x40>)
 800092c:	4798      	blx	r3
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]

	return status;
 8000932:	79fb      	ldrb	r3, [r7, #7]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000254 	.word	0x20000254
 8000940:	20000450 	.word	0x20000450
 8000944:	08003ad8 	.word	0x08003ad8

08000948 <LCD5110_set_XY>:

// -----------------------------------------------------------------------------------------------------------------------------
// ---- Função para setar a posição XY no display ----

HAL_StatusTypeDef LCD5110_set_XY(uint8_t x, uint8_t y)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	460a      	mov	r2, r1
 8000952:	71fb      	strb	r3, [r7, #7]
 8000954:	4613      	mov	r3, r2
 8000956:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	// testa o estado do buffer
	if(buf.status==B_BUSY)
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <LCD5110_set_XY+0x80>)
 800095a:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 800095e:	2b01      	cmp	r3, #1
 8000960:	d101      	bne.n	8000966 <LCD5110_set_XY+0x1e>
		return HAL_BUSY; //retorna que o buffer está ocupado
 8000962:	2302      	movs	r3, #2
 8000964:	e02c      	b.n	80009c0 <LCD5110_set_XY+0x78>

	// atualiza o status
	buf.status = B_BUSY;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <LCD5110_set_XY+0x80>)
 8000968:	2201      	movs	r2, #1
 800096a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

	// acerta o endereço em função da largura da fonte
	x *= LARGFONTE;
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	461a      	mov	r2, r3
 8000972:	0052      	lsls	r2, r2, #1
 8000974:	4413      	add	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	71fb      	strb	r3, [r7, #7]

	// garante que x será de 7bits e que y será de 3bits
	x &= 0x7f;
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000980:	71fb      	strb	r3, [r7, #7]
	y &= 0x07;
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	71bb      	strb	r3, [r7, #6]

	buf.dado[0] = 0x40|y;
 800098a:	79bb      	ldrb	r3, [r7, #6]
 800098c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <LCD5110_set_XY+0x80>)
 8000994:	701a      	strb	r2, [r3, #0]
	buf.dado[1] = 0x80|x;
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <LCD5110_set_XY+0x80>)
 80009a0:	705a      	strb	r2, [r3, #1]
	buf.ocupacao = 2;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <LCD5110_set_XY+0x80>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa

	// envia o comando de setar a posição ao display
	status = LCD_write(buf.dado, buf.ocupacao, 0);
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <LCD5110_set_XY+0x84>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <LCD5110_set_XY+0x80>)
 80009b0:	f8b2 11fa 	ldrh.w	r1, [r2, #506]	; 0x1fa
 80009b4:	2200      	movs	r2, #0
 80009b6:	4804      	ldr	r0, [pc, #16]	; (80009c8 <LCD5110_set_XY+0x80>)
 80009b8:	4798      	blx	r3
 80009ba:	4603      	mov	r3, r0
 80009bc:	73fb      	strb	r3, [r7, #15]

	return status;
 80009be:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000254 	.word	0x20000254
 80009cc:	20000450 	.word	0x20000450

080009d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_DMA_Init+0x3c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <MX_DMA_Init+0x3c>)
 80009e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_DMA_Init+0x3c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 6, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2106      	movs	r1, #6
 80009f6:	200f      	movs	r0, #15
 80009f8:	f000 fcef 	bl	80013da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80009fc:	200f      	movs	r0, #15
 80009fe:	f000 fd08 	bl	8001412 <HAL_NVIC_EnableIRQ>

}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_GPIO_Init+0x60>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <MX_GPIO_Init+0x60>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_GPIO_Init+0x60>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NK_RS_Pin|NK_CS_Pin|NK_DC_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8000a46:	480b      	ldr	r0, [pc, #44]	; (8000a74 <MX_GPIO_Init+0x64>)
 8000a48:	f001 fa24 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = NK_RS_Pin|NK_CS_Pin|NK_DC_Pin;
 8000a4c:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8000a50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_GPIO_Init+0x64>)
 8000a64:	f001 f882 	bl	8001b6c <HAL_GPIO_Init>

}
 8000a68:	bf00      	nop
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020400 	.word	0x40020400

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fb3c 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f864 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f7ff ffc4 	bl	8000a10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a88:	f7ff ffa2 	bl	80009d0 <MX_DMA_Init>
  MX_SPI2_Init();
 8000a8c:	f000 f984 	bl	8000d98 <MX_SPI2_Init>
  MX_TIM11_Init();
 8000a90:	f000 fabc 	bl	800100c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim11);
 8000a94:	4824      	ldr	r0, [pc, #144]	; (8000b28 <main+0xb0>)
 8000a96:	f002 fd69 	bl	800356c <HAL_TIM_Base_Start_IT>

  // ====================================================================================
  // --- Configurações do hardware do display ---
  	hlcd.hspi = &hspi2;
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <main+0xb4>)
 8000a9c:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <main+0xb8>)
 8000a9e:	601a      	str	r2, [r3, #0]

  	hlcd.Mode = LCD_DMA;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <main+0xb4>)
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	711a      	strb	r2, [r3, #4]

  	hlcd.CS_Port = NK_CS_GPIO_Port;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <main+0xb4>)
 8000aa8:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <main+0xbc>)
 8000aaa:	609a      	str	r2, [r3, #8]
  	hlcd.CS_Pin = NK_CS_Pin;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <main+0xb4>)
 8000aae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab2:	819a      	strh	r2, [r3, #12]

  	hlcd.DC_Port = NK_DC_GPIO_Port;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <main+0xb4>)
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <main+0xbc>)
 8000ab8:	611a      	str	r2, [r3, #16]
  	hlcd.DC_Pin = NK_DC_Pin;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <main+0xb4>)
 8000abc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac0:	829a      	strh	r2, [r3, #20]

  	hlcd.RS_Port = NK_RS_GPIO_Port;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <main+0xb4>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <main+0xbc>)
 8000ac6:	619a      	str	r2, [r3, #24]
  	hlcd.RS_Pin = NK_RS_Pin;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <main+0xb4>)
 8000aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ace:	839a      	strh	r2, [r3, #28]

  	// manda a estrutura de dados com as configurações do display pra inicialização
	LCD5110_init(&hlcd);
 8000ad0:	4816      	ldr	r0, [pc, #88]	; (8000b2c <main+0xb4>)
 8000ad2:	f7ff fd13 	bl	80004fc <LCD5110_init>

	// Telas iniciais
	while(LCD5110_set_XY(0, 0)!=HAL_OK){};
 8000ad6:	bf00      	nop
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff ff34 	bl	8000948 <LCD5110_set_XY>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f8      	bne.n	8000ad8 <main+0x60>
	while(LCD5110_write_str("Bairro da")!=HAL_OK){};
 8000ae6:	bf00      	nop
 8000ae8:	4813      	ldr	r0, [pc, #76]	; (8000b38 <main+0xc0>)
 8000aea:	f7ff fee1 	bl	80008b0 <LCD5110_write_str>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f9      	bne.n	8000ae8 <main+0x70>
	while(LCD5110_set_XY(0, 1)!=HAL_OK){};
 8000af4:	bf00      	nop
 8000af6:	2101      	movs	r1, #1
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff ff25 	bl	8000948 <LCD5110_set_XY>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f8      	bne.n	8000af6 <main+0x7e>
	while(LCD5110_write_str("Azenha")!=HAL_OK){};
 8000b04:	bf00      	nop
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <main+0xc4>)
 8000b08:	f7ff fed2 	bl	80008b0 <LCD5110_write_str>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f9      	bne.n	8000b06 <main+0x8e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	// inicialização das variáveis de controle da tela
	tela = 1;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <main+0xc8>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
	me_display = 0;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <main+0xcc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
	delayTela = DTELA;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <main+0xd0>)
 8000b20:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b24:	801a      	strh	r2, [r3, #0]

  while (1)
 8000b26:	e7fe      	b.n	8000b26 <main+0xae>
 8000b28:	20000538 	.word	0x20000538
 8000b2c:	20000458 	.word	0x20000458
 8000b30:	20000480 	.word	0x20000480
 8000b34:	40020400 	.word	0x40020400
 8000b38:	08003a84 	.word	0x08003a84
 8000b3c:	08003a90 	.word	0x08003a90
 8000b40:	20000454 	.word	0x20000454
 8000b44:	20000478 	.word	0x20000478
 8000b48:	2000047c 	.word	0x2000047c

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	; 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2234      	movs	r2, #52	; 0x34
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 ff7e 	bl	8003a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <SystemClock_Config+0xd4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b98:	4a21      	ldr	r2, [pc, #132]	; (8000c20 <SystemClock_Config+0xd4>)
 8000b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <SystemClock_Config+0xd4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000bc4:	2354      	movs	r3, #84	; 0x54
 8000bc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fbb7 	bl	800234c <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000be4:	f000 f8d2 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	2302      	movs	r3, #2
 8000bee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	2102      	movs	r1, #2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 f95f 	bl	8001ec8 <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c10:	f000 f8bc 	bl	8000d8c <Error_Handler>
  }
}
 8000c14:	bf00      	nop
 8000c16:	3750      	adds	r7, #80	; 0x50
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40007000 	.word	0x40007000

08000c24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM11)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a4f      	ldr	r2, [pc, #316]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	f040 8088 	bne.w	8000d48 <HAL_TIM_PeriodElapsedCallback+0x124>
	{
		  switch(me_display)
 8000c38:	4b4e      	ldr	r3, [pc, #312]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b06      	cmp	r3, #6
 8000c3e:	f200 8092 	bhi.w	8000d66 <HAL_TIM_PeriodElapsedCallback+0x142>
 8000c42:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c48:	08000c65 	.word	0x08000c65
 8000c4c:	08000c8f 	.word	0x08000c8f
 8000c50:	08000ca7 	.word	0x08000ca7
 8000c54:	08000cc7 	.word	0x08000cc7
 8000c58:	08000ce7 	.word	0x08000ce7
 8000c5c:	08000d0b 	.word	0x08000d0b
 8000c60:	08000d2b 	.word	0x08000d2b
		  {
			case 0:
				delayTela--;
 8000c64:	4b44      	ldr	r3, [pc, #272]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000c6e:	801a      	strh	r2, [r3, #0]

				  if (delayTela == 0)
 8000c70:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d169      	bne.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x128>
				  {
					  delayTela=DTELA;
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000c7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000c7e:	801a      	strh	r2, [r3, #0]
					  me_display++;
 8000c80:	4b3c      	ldr	r3, [pc, #240]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000c8a:	701a      	strb	r2, [r3, #0]
				  }
			break;
 8000c8c:	e05e      	b.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x128>

			case 1:
				if (LCD5110_clear()==HAL_OK)
 8000c8e:	f7ff fe39 	bl	8000904 <LCD5110_clear>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d15b      	bne.n	8000d50 <HAL_TIM_PeriodElapsedCallback+0x12c>
				{
					me_display++;
 8000c98:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000ca2:	701a      	strb	r2, [r3, #0]
				}
			break;
 8000ca4:	e054      	b.n	8000d50 <HAL_TIM_PeriodElapsedCallback+0x12c>

			case 2:
				if (LCD5110_set_XY(0,0)==HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fe4d 	bl	8000948 <LCD5110_set_XY>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14f      	bne.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0x130>
				{
					me_display += tela;
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000cc2:	701a      	strb	r2, [r3, #0]
				}
			break;
 8000cc4:	e046      	b.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0x130>

			case 3:
				if (LCD5110_write_str("Venho do      bairro da     azenha")==HAL_OK)
 8000cc6:	482e      	ldr	r0, [pc, #184]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000cc8:	f7ff fdf2 	bl	80008b0 <LCD5110_write_str>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d142      	bne.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x134>
				{
					me_display = 0;
 8000cd2:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
					tela++;
 8000cd8:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ce2:	701a      	strb	r2, [r3, #0]
				}
			break;
 8000ce4:	e038      	b.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x134>

			case 4:
				if (LCD5110_write(gremio, 504)==HAL_OK)
 8000ce6:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000cea:	4826      	ldr	r0, [pc, #152]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000cec:	f7ff fca2 	bl	8000634 <LCD5110_write>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d132      	bne.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x138>
				{
					me_display = 0;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
					tela++;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000d06:	701a      	strb	r2, [r3, #0]
				}
			break;
 8000d08:	e028      	b.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x138>

			case 5:
				if (LCD5110_write_str("bairro do     monumental")==HAL_OK)
 8000d0a:	481f      	ldr	r0, [pc, #124]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000d0c:	f7ff fdd0 	bl	80008b0 <LCD5110_write_str>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d124      	bne.n	8000d60 <HAL_TIM_PeriodElapsedCallback+0x13c>
				{
					me_display = 0;
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
					tela++;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000d26:	701a      	strb	r2, [r3, #0]
				}
			break;
 8000d28:	e01a      	b.n	8000d60 <HAL_TIM_PeriodElapsedCallback+0x13c>

			case 6:
				if (LCD5110_write(gremio, 504)==HAL_OK)
 8000d2a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000d2e:	4815      	ldr	r0, [pc, #84]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000d30:	f7ff fc80 	bl	8000634 <LCD5110_write>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d114      	bne.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x140>
				{
					me_display = 0;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
					tela=1;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
				}
			break;
 8000d46:	e00d      	b.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x140>
		  }
	}
 8000d48:	bf00      	nop
 8000d4a:	e00c      	b.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x142>
			break;
 8000d4c:	bf00      	nop
 8000d4e:	e00a      	b.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x142>
			break;
 8000d50:	bf00      	nop
 8000d52:	e008      	b.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x142>
			break;
 8000d54:	bf00      	nop
 8000d56:	e006      	b.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x142>
			break;
 8000d58:	bf00      	nop
 8000d5a:	e004      	b.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x142>
			break;
 8000d5c:	bf00      	nop
 8000d5e:	e002      	b.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x142>
			break;
 8000d60:	bf00      	nop
 8000d62:	e000      	b.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x142>
			break;
 8000d64:	bf00      	nop

}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40014800 	.word	0x40014800
 8000d74:	20000478 	.word	0x20000478
 8000d78:	2000047c 	.word	0x2000047c
 8000d7c:	20000454 	.word	0x20000454
 8000d80:	08003a98 	.word	0x08003a98
 8000d84:	08003cd0 	.word	0x08003cd0
 8000d88:	08003abc 	.word	0x08003abc

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000d9e:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <MX_SPI2_Init+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000da4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000da8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dcc:	2238      	movs	r2, #56	; 0x38
 8000dce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000de4:	220a      	movs	r2, #10
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_SPI2_Init+0x64>)
 8000dea:	f001 fd4d 	bl	8002888 <HAL_SPI_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000df4:	f7ff ffca 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000480 	.word	0x20000480
 8000e00:	40003800 	.word	0x40003800

08000e04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a34      	ldr	r2, [pc, #208]	; (8000ef4 <HAL_SPI_MspInit+0xf0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d161      	bne.n	8000eea <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <HAL_SPI_MspInit+0xf4>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a32      	ldr	r2, [pc, #200]	; (8000ef8 <HAL_SPI_MspInit+0xf4>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <HAL_SPI_MspInit+0xf4>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <HAL_SPI_MspInit+0xf4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <HAL_SPI_MspInit+0xf4>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <HAL_SPI_MspInit+0xf4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NK_CLK_Pin|NK_MO_Pin;
 8000e5e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e70:	2305      	movs	r3, #5
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4820      	ldr	r0, [pc, #128]	; (8000efc <HAL_SPI_MspInit+0xf8>)
 8000e7c:	f000 fe76 	bl	8001b6c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000e82:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <HAL_SPI_MspInit+0x100>)
 8000e84:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000e8e:	2240      	movs	r2, #64	; 0x40
 8000e90:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ebe:	4810      	ldr	r0, [pc, #64]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000ec0:	f000 fac2 	bl	8001448 <HAL_DMA_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000eca:	f7ff ff5f 	bl	8000d8c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000ed2:	649a      	str	r2, [r3, #72]	; 0x48
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_SPI_MspInit+0xfc>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2102      	movs	r1, #2
 8000ede:	2024      	movs	r0, #36	; 0x24
 8000ee0:	f000 fa7b 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ee4:	2024      	movs	r0, #36	; 0x24
 8000ee6:	f000 fa94 	bl	8001412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40003800 	.word	0x40003800
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020400 	.word	0x40020400
 8000f00:	200004d8 	.word	0x200004d8
 8000f04:	40026070 	.word	0x40026070

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f8fa 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DMA1_Stream4_IRQHandler+0x10>)
 8000fb2:	f000 fb71 	bl	8001698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200004d8 	.word	0x200004d8

08000fc0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000fc6:	f002 fb41 	bl	800364c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000538 	.word	0x20000538

08000fd4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <SPI2_IRQHandler+0x10>)
 8000fda:	f001 ff5b 	bl	8002e94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000480 	.word	0x20000480

08000fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_TIM11_Init+0x40>)
 8001012:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <MX_TIM11_Init+0x44>)
 8001014:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 419;
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <MX_TIM11_Init+0x40>)
 8001018:	f240 12a3 	movw	r2, #419	; 0x1a3
 800101c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_TIM11_Init+0x40>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_TIM11_Init+0x40>)
 8001026:	f240 32e7 	movw	r2, #999	; 0x3e7
 800102a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <MX_TIM11_Init+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_TIM11_Init+0x40>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <MX_TIM11_Init+0x40>)
 800103a:	f002 fa47 	bl	80034cc <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001044:	f7ff fea2 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000538 	.word	0x20000538
 8001050:	40014800 	.word	0x40014800

08001054 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_TIM_Base_MspInit+0x48>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d115      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_TIM_Base_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <HAL_TIM_Base_MspInit+0x4c>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_TIM_Base_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 4, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2104      	movs	r1, #4
 8001086:	201a      	movs	r0, #26
 8001088:	f000 f9a7 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800108c:	201a      	movs	r0, #26
 800108e:	f000 f9c0 	bl	8001412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40014800 	.word	0x40014800
 80010a0:	40023800 	.word	0x40023800

080010a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010aa:	490e      	ldr	r1, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010ac:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c0:	4c0b      	ldr	r4, [pc, #44]	; (80010f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ce:	f7ff ff8b 	bl	8000fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d2:	f002 fc9f 	bl	8003a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d6:	f7ff fccf 	bl	8000a78 <main>
  bx  lr    
 80010da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80010e8:	08003ef0 	.word	0x08003ef0
  ldr r2, =_sbss
 80010ec:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80010f0:	20000584 	.word	0x20000584

080010f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_Init+0x40>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_Init+0x40>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x40>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f94f 	bl	80013c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	2000      	movs	r0, #0
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff feec 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f967 	bl	800142e <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f92f 	bl	80013da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000228 	.word	0x20000228
 8001194:	20000230 	.word	0x20000230
 8001198:	2000022c 	.word	0x2000022c

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000230 	.word	0x20000230
 80011c0:	20000580 	.word	0x20000580

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000580 	.word	0x20000580

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000230 	.word	0x20000230

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001390:	d301      	bcc.n	8001396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001392:	2301      	movs	r3, #1
 8001394:	e00f      	b.n	80013b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <SysTick_Config+0x40>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139e:	210f      	movs	r1, #15
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f7ff ff8e 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <SysTick_Config+0x40>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <SysTick_Config+0x40>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010

080013c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff29 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ec:	f7ff ff3e 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	f7ff ff8e 	bl	8001318 <NVIC_EncodePriority>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff5d 	bl	80012c4 <__NVIC_SetPriority>
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff31 	bl	8001288 <__NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffa2 	bl	8001380 <SysTick_Config>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff feb6 	bl	80011c4 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e099      	b.n	8001598 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2202      	movs	r2, #2
 8001468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001484:	e00f      	b.n	80014a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001486:	f7ff fe9d 	bl	80011c4 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b05      	cmp	r3, #5
 8001492:	d908      	bls.n	80014a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2220      	movs	r2, #32
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e078      	b.n	8001598 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1e8      	bne.n	8001486 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <HAL_DMA_Init+0x158>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d107      	bne.n	8001510 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4313      	orrs	r3, r2
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f023 0307 	bic.w	r3, r3, #7
 8001526:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	4313      	orrs	r3, r2
 8001530:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	2b04      	cmp	r3, #4
 8001538:	d117      	bne.n	800156a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4313      	orrs	r3, r2
 8001542:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00e      	beq.n	800156a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fa91 	bl	8001a74 <DMA_CheckFifoParam>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2240      	movs	r2, #64	; 0x40
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001566:	2301      	movs	r3, #1
 8001568:	e016      	b.n	8001598 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fa48 	bl	8001a08 <DMA_CalcBaseAndBitshift>
 8001578:	4603      	mov	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	223f      	movs	r2, #63	; 0x3f
 8001582:	409a      	lsls	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	f010803f 	.word	0xf010803f

080015a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_DMA_Start_IT+0x26>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e040      	b.n	800164c <HAL_DMA_Start_IT+0xa8>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d12f      	bne.n	800163e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2202      	movs	r2, #2
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 f9da 	bl	80019ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fc:	223f      	movs	r2, #63	; 0x3f
 80015fe:	409a      	lsls	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0216 	orr.w	r2, r2, #22
 8001612:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0208 	orr.w	r2, r2, #8
 800162a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e005      	b.n	800164a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001646:	2302      	movs	r3, #2
 8001648:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800164a:	7dfb      	ldrb	r3, [r7, #23]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d004      	beq.n	8001672 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00c      	b.n	800168c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2205      	movs	r2, #5
 8001676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_DMA_IRQHandler+0x258>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a92      	ldr	r2, [pc, #584]	; (80018f4 <HAL_DMA_IRQHandler+0x25c>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	0a9b      	lsrs	r3, r3, #10
 80016b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c2:	2208      	movs	r2, #8
 80016c4:	409a      	lsls	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01a      	beq.n	8001704 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0204 	bic.w	r2, r2, #4
 80016ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f0:	2208      	movs	r2, #8
 80016f2:	409a      	lsls	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	2201      	movs	r2, #1
 800170a:	409a      	lsls	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d012      	beq.n	800173a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	2201      	movs	r2, #1
 8001728:	409a      	lsls	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001732:	f043 0202 	orr.w	r2, r3, #2
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	2204      	movs	r2, #4
 8001740:	409a      	lsls	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d012      	beq.n	8001770 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00b      	beq.n	8001770 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175c:	2204      	movs	r2, #4
 800175e:	409a      	lsls	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001768:	f043 0204 	orr.w	r2, r3, #4
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001774:	2210      	movs	r2, #16
 8001776:	409a      	lsls	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d043      	beq.n	8001808 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d03c      	beq.n	8001808 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001792:	2210      	movs	r2, #16
 8001794:	409a      	lsls	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d018      	beq.n	80017da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d108      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d024      	beq.n	8001808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
 80017c6:	e01f      	b.n	8001808 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01b      	beq.n	8001808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
 80017d8:	e016      	b.n	8001808 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d107      	bne.n	80017f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0208 	bic.w	r2, r2, #8
 80017f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2220      	movs	r2, #32
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 808e 	beq.w	8001936 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8086 	beq.w	8001936 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2220      	movs	r2, #32
 8001830:	409a      	lsls	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b05      	cmp	r3, #5
 8001840:	d136      	bne.n	80018b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0216 	bic.w	r2, r2, #22
 8001850:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001860:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d103      	bne.n	8001872 <HAL_DMA_IRQHandler+0x1da>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0208 	bic.w	r2, r2, #8
 8001880:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	223f      	movs	r2, #63	; 0x3f
 8001888:	409a      	lsls	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d07d      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	4798      	blx	r3
        }
        return;
 80018ae:	e078      	b.n	80019a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d01c      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d108      	bne.n	80018de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d030      	beq.n	8001936 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
 80018dc:	e02b      	b.n	8001936 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d027      	beq.n	8001936 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
 80018ee:	e022      	b.n	8001936 <HAL_DMA_IRQHandler+0x29e>
 80018f0:	20000228 	.word	0x20000228
 80018f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10f      	bne.n	8001926 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0210 	bic.w	r2, r2, #16
 8001914:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	2b00      	cmp	r3, #0
 800193c:	d032      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d022      	beq.n	8001990 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2205      	movs	r2, #5
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0201 	bic.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3301      	adds	r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	429a      	cmp	r2, r3
 800196c:	d307      	bcc.n	800197e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f2      	bne.n	8001962 <HAL_DMA_IRQHandler+0x2ca>
 800197c:	e000      	b.n	8001980 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800197e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
 80019a0:	e000      	b.n	80019a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80019a2:	bf00      	nop
    }
  }
}
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop

080019ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	d108      	bne.n	80019ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019ea:	e007      	b.n	80019fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	60da      	str	r2, [r3, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3b10      	subs	r3, #16
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <DMA_CalcBaseAndBitshift+0x64>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a22:	4a13      	ldr	r2, [pc, #76]	; (8001a70 <DMA_CalcBaseAndBitshift+0x68>)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d909      	bls.n	8001a4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	1d1a      	adds	r2, r3, #4
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	659a      	str	r2, [r3, #88]	; 0x58
 8001a48:	e007      	b.n	8001a5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a52:	f023 0303 	bic.w	r3, r3, #3
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	aaaaaaab 	.word	0xaaaaaaab
 8001a70:	08003ed8 	.word	0x08003ed8

08001a74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d11f      	bne.n	8001ace <DMA_CheckFifoParam+0x5a>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d856      	bhi.n	8001b42 <DMA_CheckFifoParam+0xce>
 8001a94:	a201      	add	r2, pc, #4	; (adr r2, 8001a9c <DMA_CheckFifoParam+0x28>)
 8001a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9a:	bf00      	nop
 8001a9c:	08001aad 	.word	0x08001aad
 8001aa0:	08001abf 	.word	0x08001abf
 8001aa4:	08001aad 	.word	0x08001aad
 8001aa8:	08001b43 	.word	0x08001b43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d046      	beq.n	8001b46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001abc:	e043      	b.n	8001b46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ac6:	d140      	bne.n	8001b4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001acc:	e03d      	b.n	8001b4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ad6:	d121      	bne.n	8001b1c <DMA_CheckFifoParam+0xa8>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d837      	bhi.n	8001b4e <DMA_CheckFifoParam+0xda>
 8001ade:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <DMA_CheckFifoParam+0x70>)
 8001ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae4:	08001af5 	.word	0x08001af5
 8001ae8:	08001afb 	.word	0x08001afb
 8001aec:	08001af5 	.word	0x08001af5
 8001af0:	08001b0d 	.word	0x08001b0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
      break;
 8001af8:	e030      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d025      	beq.n	8001b52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b0a:	e022      	b.n	8001b52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b14:	d11f      	bne.n	8001b56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b1a:	e01c      	b.n	8001b56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d903      	bls.n	8001b2a <DMA_CheckFifoParam+0xb6>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d003      	beq.n	8001b30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b28:	e018      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8001b2e:	e015      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00e      	beq.n	8001b5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b40:	e00b      	b.n	8001b5a <DMA_CheckFifoParam+0xe6>
      break;
 8001b42:	bf00      	nop
 8001b44:	e00a      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;
 8001b46:	bf00      	nop
 8001b48:	e008      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;
 8001b4a:	bf00      	nop
 8001b4c:	e006      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;
 8001b4e:	bf00      	nop
 8001b50:	e004      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;
 8001b52:	bf00      	nop
 8001b54:	e002      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;   
 8001b56:	bf00      	nop
 8001b58:	e000      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;
 8001b5a:	bf00      	nop
    }
  } 
  
  return status; 
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	e165      	b.n	8001e54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f040 8154 	bne.w	8001e4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d005      	beq.n	8001bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d130      	bne.n	8001c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 0201 	and.w	r2, r3, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d017      	beq.n	8001c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d123      	bne.n	8001cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	220f      	movs	r2, #15
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0203 	and.w	r2, r3, #3
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80ae 	beq.w	8001e4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b5d      	ldr	r3, [pc, #372]	; (8001e6c <HAL_GPIO_Init+0x300>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a5c      	ldr	r2, [pc, #368]	; (8001e6c <HAL_GPIO_Init+0x300>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b5a      	ldr	r3, [pc, #360]	; (8001e6c <HAL_GPIO_Init+0x300>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0e:	4a58      	ldr	r2, [pc, #352]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	3302      	adds	r3, #2
 8001d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	220f      	movs	r2, #15
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4f      	ldr	r2, [pc, #316]	; (8001e74 <HAL_GPIO_Init+0x308>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d025      	beq.n	8001d86 <HAL_GPIO_Init+0x21a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4e      	ldr	r2, [pc, #312]	; (8001e78 <HAL_GPIO_Init+0x30c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01f      	beq.n	8001d82 <HAL_GPIO_Init+0x216>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4d      	ldr	r2, [pc, #308]	; (8001e7c <HAL_GPIO_Init+0x310>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d019      	beq.n	8001d7e <HAL_GPIO_Init+0x212>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <HAL_GPIO_Init+0x314>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x20e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4b      	ldr	r2, [pc, #300]	; (8001e84 <HAL_GPIO_Init+0x318>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x20a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4a      	ldr	r2, [pc, #296]	; (8001e88 <HAL_GPIO_Init+0x31c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x206>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a49      	ldr	r2, [pc, #292]	; (8001e8c <HAL_GPIO_Init+0x320>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x202>
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	e00c      	b.n	8001d88 <HAL_GPIO_Init+0x21c>
 8001d6e:	2307      	movs	r3, #7
 8001d70:	e00a      	b.n	8001d88 <HAL_GPIO_Init+0x21c>
 8001d72:	2305      	movs	r3, #5
 8001d74:	e008      	b.n	8001d88 <HAL_GPIO_Init+0x21c>
 8001d76:	2304      	movs	r3, #4
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x21c>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e004      	b.n	8001d88 <HAL_GPIO_Init+0x21c>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_Init+0x21c>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x21c>
 8001d86:	2300      	movs	r3, #0
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	f002 0203 	and.w	r2, r2, #3
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	4093      	lsls	r3, r2
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d98:	4935      	ldr	r1, [pc, #212]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_GPIO_Init+0x324>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dca:	4a31      	ldr	r2, [pc, #196]	; (8001e90 <HAL_GPIO_Init+0x324>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x324>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df4:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <HAL_GPIO_Init+0x324>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_GPIO_Init+0x324>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1e:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <HAL_GPIO_Init+0x324>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_GPIO_Init+0x324>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e48:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_GPIO_Init+0x324>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	f67f ae96 	bls.w	8001b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40013800 	.word	0x40013800
 8001e74:	40020000 	.word	0x40020000
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40021400 	.word	0x40021400
 8001e8c:	40021800 	.word	0x40021800
 8001e90:	40013c00 	.word	0x40013c00

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb0:	e003      	b.n	8001eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0cc      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001edc:	4b68      	ldr	r3, [pc, #416]	; (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d90c      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b65      	ldr	r3, [pc, #404]	; (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b63      	ldr	r3, [pc, #396]	; (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0b8      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a58      	ldr	r2, [pc, #352]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f34:	4b53      	ldr	r3, [pc, #332]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4a52      	ldr	r2, [pc, #328]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f40:	4b50      	ldr	r3, [pc, #320]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	494d      	ldr	r1, [pc, #308]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d044      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d119      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e07f      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f86:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e06f      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e067      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4934      	ldr	r1, [pc, #208]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7ff f904 	bl	80011c4 <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7ff f900 	bl	80011c4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e04f      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 020c 	and.w	r2, r3, #12
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d1eb      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d20c      	bcs.n	8002010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b22      	ldr	r3, [pc, #136]	; (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e032      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4916      	ldr	r1, [pc, #88]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d009      	beq.n	800204e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	490e      	ldr	r1, [pc, #56]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800204e:	f000 f821 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8002052:	4602      	mov	r2, r0
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	490a      	ldr	r1, [pc, #40]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	5ccb      	ldrb	r3, [r1, r3]
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f864 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023c00 	.word	0x40023c00
 8002084:	40023800 	.word	0x40023800
 8002088:	08003ec8 	.word	0x08003ec8
 800208c:	20000228 	.word	0x20000228
 8002090:	2000022c 	.word	0x2000022c

08002094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002098:	b087      	sub	sp, #28
 800209a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800209c:	2600      	movs	r6, #0
 800209e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80020a0:	2600      	movs	r6, #0
 80020a2:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80020a4:	2600      	movs	r6, #0
 80020a6:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80020a8:	2600      	movs	r6, #0
 80020aa:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ac:	2600      	movs	r6, #0
 80020ae:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b0:	4ea3      	ldr	r6, [pc, #652]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80020b2:	68b6      	ldr	r6, [r6, #8]
 80020b4:	f006 060c 	and.w	r6, r6, #12
 80020b8:	2e0c      	cmp	r6, #12
 80020ba:	f200 8137 	bhi.w	800232c <HAL_RCC_GetSysClockFreq+0x298>
 80020be:	f20f 0c08 	addw	ip, pc, #8
 80020c2:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020fd 	.word	0x080020fd
 80020cc:	0800232d 	.word	0x0800232d
 80020d0:	0800232d 	.word	0x0800232d
 80020d4:	0800232d 	.word	0x0800232d
 80020d8:	08002103 	.word	0x08002103
 80020dc:	0800232d 	.word	0x0800232d
 80020e0:	0800232d 	.word	0x0800232d
 80020e4:	0800232d 	.word	0x0800232d
 80020e8:	08002109 	.word	0x08002109
 80020ec:	0800232d 	.word	0x0800232d
 80020f0:	0800232d 	.word	0x0800232d
 80020f4:	0800232d 	.word	0x0800232d
 80020f8:	0800221f 	.word	0x0800221f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4b91      	ldr	r3, [pc, #580]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80020fe:	613b      	str	r3, [r7, #16]
       break;
 8002100:	e117      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002102:	4b91      	ldr	r3, [pc, #580]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002104:	613b      	str	r3, [r7, #16]
      break;
 8002106:	e114      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002108:	4b8d      	ldr	r3, [pc, #564]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002110:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002112:	4b8b      	ldr	r3, [pc, #556]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d024      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211e:	4b88      	ldr	r3, [pc, #544]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	099b      	lsrs	r3, r3, #6
 8002124:	461a      	mov	r2, r3
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	f240 14ff 	movw	r4, #511	; 0x1ff
 800212e:	f04f 0500 	mov.w	r5, #0
 8002132:	ea02 0004 	and.w	r0, r2, r4
 8002136:	ea03 0105 	and.w	r1, r3, r5
 800213a:	4b83      	ldr	r3, [pc, #524]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800213c:	fb03 f201 	mul.w	r2, r3, r1
 8002140:	2300      	movs	r3, #0
 8002142:	fb03 f300 	mul.w	r3, r3, r0
 8002146:	4413      	add	r3, r2
 8002148:	4a7f      	ldr	r2, [pc, #508]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800214a:	fba0 0102 	umull	r0, r1, r0, r2
 800214e:	440b      	add	r3, r1
 8002150:	4619      	mov	r1, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	461a      	mov	r2, r3
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	f7fe f853 	bl	8000204 <__aeabi_uldivmod>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4613      	mov	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e04c      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002168:	4b75      	ldr	r3, [pc, #468]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	461a      	mov	r2, r3
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002178:	f04f 0100 	mov.w	r1, #0
 800217c:	ea02 0800 	and.w	r8, r2, r0
 8002180:	ea03 0901 	and.w	r9, r3, r1
 8002184:	4640      	mov	r0, r8
 8002186:	4649      	mov	r1, r9
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	014b      	lsls	r3, r1, #5
 8002192:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002196:	0142      	lsls	r2, r0, #5
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	ebb0 0008 	subs.w	r0, r0, r8
 80021a0:	eb61 0109 	sbc.w	r1, r1, r9
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	018b      	lsls	r3, r1, #6
 80021ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021b2:	0182      	lsls	r2, r0, #6
 80021b4:	1a12      	subs	r2, r2, r0
 80021b6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ba:	f04f 0000 	mov.w	r0, #0
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	00d9      	lsls	r1, r3, #3
 80021c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021c8:	00d0      	lsls	r0, r2, #3
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	eb12 0208 	adds.w	r2, r2, r8
 80021d2:	eb43 0309 	adc.w	r3, r3, r9
 80021d6:	f04f 0000 	mov.w	r0, #0
 80021da:	f04f 0100 	mov.w	r1, #0
 80021de:	0299      	lsls	r1, r3, #10
 80021e0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021e4:	0290      	lsls	r0, r2, #10
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	461a      	mov	r2, r3
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	f7fe f805 	bl	8000204 <__aeabi_uldivmod>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4613      	mov	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002202:	4b4f      	ldr	r3, [pc, #316]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	0c1b      	lsrs	r3, r3, #16
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	3301      	adds	r3, #1
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	613b      	str	r3, [r7, #16]
      break;
 800221c:	e089      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800221e:	4948      	ldr	r1, [pc, #288]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002220:	6849      	ldr	r1, [r1, #4]
 8002222:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002226:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002228:	4945      	ldr	r1, [pc, #276]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800222a:	6849      	ldr	r1, [r1, #4]
 800222c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002230:	2900      	cmp	r1, #0
 8002232:	d024      	beq.n	800227e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002234:	4942      	ldr	r1, [pc, #264]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002236:	6849      	ldr	r1, [r1, #4]
 8002238:	0989      	lsrs	r1, r1, #6
 800223a:	4608      	mov	r0, r1
 800223c:	f04f 0100 	mov.w	r1, #0
 8002240:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002244:	f04f 0500 	mov.w	r5, #0
 8002248:	ea00 0204 	and.w	r2, r0, r4
 800224c:	ea01 0305 	and.w	r3, r1, r5
 8002250:	493d      	ldr	r1, [pc, #244]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002252:	fb01 f003 	mul.w	r0, r1, r3
 8002256:	2100      	movs	r1, #0
 8002258:	fb01 f102 	mul.w	r1, r1, r2
 800225c:	1844      	adds	r4, r0, r1
 800225e:	493a      	ldr	r1, [pc, #232]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002260:	fba2 0101 	umull	r0, r1, r2, r1
 8002264:	1863      	adds	r3, r4, r1
 8002266:	4619      	mov	r1, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	461a      	mov	r2, r3
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	f7fd ffc8 	bl	8000204 <__aeabi_uldivmod>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4613      	mov	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e04a      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	099b      	lsrs	r3, r3, #6
 8002284:	461a      	mov	r2, r3
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	ea02 0400 	and.w	r4, r2, r0
 8002296:	ea03 0501 	and.w	r5, r3, r1
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	014b      	lsls	r3, r1, #5
 80022a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022ac:	0142      	lsls	r2, r0, #5
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	1b00      	subs	r0, r0, r4
 80022b4:	eb61 0105 	sbc.w	r1, r1, r5
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	018b      	lsls	r3, r1, #6
 80022c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022c6:	0182      	lsls	r2, r0, #6
 80022c8:	1a12      	subs	r2, r2, r0
 80022ca:	eb63 0301 	sbc.w	r3, r3, r1
 80022ce:	f04f 0000 	mov.w	r0, #0
 80022d2:	f04f 0100 	mov.w	r1, #0
 80022d6:	00d9      	lsls	r1, r3, #3
 80022d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022dc:	00d0      	lsls	r0, r2, #3
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	1912      	adds	r2, r2, r4
 80022e4:	eb45 0303 	adc.w	r3, r5, r3
 80022e8:	f04f 0000 	mov.w	r0, #0
 80022ec:	f04f 0100 	mov.w	r1, #0
 80022f0:	0299      	lsls	r1, r3, #10
 80022f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022f6:	0290      	lsls	r0, r2, #10
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	461a      	mov	r2, r3
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	f7fd ff7c 	bl	8000204 <__aeabi_uldivmod>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4613      	mov	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	0f1b      	lsrs	r3, r3, #28
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	613b      	str	r3, [r7, #16]
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800232e:	613b      	str	r3, [r7, #16]
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	693b      	ldr	r3, [r7, #16]
}
 8002334:	4618      	mov	r0, r3
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	00f42400 	.word	0x00f42400
 8002348:	017d7840 	.word	0x017d7840

0800234c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e28d      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8083 	beq.w	8002472 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800236c:	4b94      	ldr	r3, [pc, #592]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b04      	cmp	r3, #4
 8002376:	d019      	beq.n	80023ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002378:	4b91      	ldr	r3, [pc, #580]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002380:	2b08      	cmp	r3, #8
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002384:	4b8e      	ldr	r3, [pc, #568]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002390:	d00c      	beq.n	80023ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002392:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d112      	bne.n	80023c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239e:	4b88      	ldr	r3, [pc, #544]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4b84      	ldr	r3, [pc, #528]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d05b      	beq.n	8002470 <HAL_RCC_OscConfig+0x124>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d157      	bne.n	8002470 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e25a      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x90>
 80023ce:	4b7c      	ldr	r3, [pc, #496]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a7b      	ldr	r2, [pc, #492]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0xcc>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0xb4>
 80023e6:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a75      	ldr	r2, [pc, #468]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a72      	ldr	r2, [pc, #456]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0xcc>
 8002400:	4b6f      	ldr	r3, [pc, #444]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a6e      	ldr	r2, [pc, #440]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b6c      	ldr	r3, [pc, #432]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6b      	ldr	r2, [pc, #428]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe fed0 	bl	80011c4 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002428:	f7fe fecc 	bl	80011c4 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e21f      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0xdc>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe febc 	bl	80011c4 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe feb8 	bl	80011c4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e20b      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	4b57      	ldr	r3, [pc, #348]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x104>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d06f      	beq.n	800255e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800247e:	4b50      	ldr	r3, [pc, #320]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d017      	beq.n	80024ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800248a:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002492:	2b08      	cmp	r3, #8
 8002494:	d105      	bne.n	80024a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002496:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d11c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	4b44      	ldr	r3, [pc, #272]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	4b41      	ldr	r3, [pc, #260]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x186>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e1d3      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d2:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4937      	ldr	r1, [pc, #220]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	e03a      	b.n	800255e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f0:	4b34      	ldr	r3, [pc, #208]	; (80025c4 <HAL_RCC_OscConfig+0x278>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fe65 	bl	80011c4 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fe:	f7fe fe61 	bl	80011c4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e1b4      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4925      	ldr	r1, [pc, #148]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_OscConfig+0x278>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fe44 	bl	80011c4 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002540:	f7fe fe40 	bl	80011c4 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e193      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d036      	beq.n	80025d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_RCC_OscConfig+0x27c>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7fe fe24 	bl	80011c4 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002580:	f7fe fe20 	bl	80011c4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e173      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x234>
 800259e:	e01b      	b.n	80025d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_OscConfig+0x27c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe fe0d 	bl	80011c4 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ac:	e00e      	b.n	80025cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ae:	f7fe fe09 	bl	80011c4 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d907      	bls.n	80025cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e15c      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
 80025c0:	40023800 	.word	0x40023800
 80025c4:	42470000 	.word	0x42470000
 80025c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b8a      	ldr	r3, [pc, #552]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 80025ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ea      	bne.n	80025ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8097 	beq.w	8002714 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b83      	ldr	r3, [pc, #524]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b7f      	ldr	r3, [pc, #508]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a7e      	ldr	r2, [pc, #504]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b7c      	ldr	r3, [pc, #496]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b79      	ldr	r3, [pc, #484]	; (80027fc <HAL_RCC_OscConfig+0x4b0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4b76      	ldr	r3, [pc, #472]	; (80027fc <HAL_RCC_OscConfig+0x4b0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a75      	ldr	r2, [pc, #468]	; (80027fc <HAL_RCC_OscConfig+0x4b0>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7fe fdc9 	bl	80011c4 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002636:	f7fe fdc5 	bl	80011c4 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e118      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	4b6c      	ldr	r3, [pc, #432]	; (80027fc <HAL_RCC_OscConfig+0x4b0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x31e>
 800265c:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	4a65      	ldr	r2, [pc, #404]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6713      	str	r3, [r2, #112]	; 0x70
 8002668:	e01c      	b.n	80026a4 <HAL_RCC_OscConfig+0x358>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b05      	cmp	r3, #5
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x340>
 8002672:	4b61      	ldr	r3, [pc, #388]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a60      	ldr	r2, [pc, #384]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	4b5e      	ldr	r3, [pc, #376]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	4a5d      	ldr	r2, [pc, #372]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6713      	str	r3, [r2, #112]	; 0x70
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0x358>
 800268c:	4b5a      	ldr	r3, [pc, #360]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	4a59      	ldr	r2, [pc, #356]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6713      	str	r3, [r2, #112]	; 0x70
 8002698:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe fd8a 	bl	80011c4 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe fd86 	bl	80011c4 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0d7      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ca:	4b4b      	ldr	r3, [pc, #300]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ee      	beq.n	80026b4 <HAL_RCC_OscConfig+0x368>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fd74 	bl	80011c4 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7fe fd70 	bl	80011c4 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e0c1      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f6:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1ee      	bne.n	80026e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002702:	7dfb      	ldrb	r3, [r7, #23]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002708:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	4a3a      	ldr	r2, [pc, #232]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 800270e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80ad 	beq.w	8002878 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800271e:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b08      	cmp	r3, #8
 8002728:	d060      	beq.n	80027ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d145      	bne.n	80027be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <HAL_RCC_OscConfig+0x4b4>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fd44 	bl	80011c4 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe fd40 	bl	80011c4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e093      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	019b      	lsls	r3, r3, #6
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	3b01      	subs	r3, #1
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	071b      	lsls	r3, r3, #28
 800278a:	491b      	ldr	r1, [pc, #108]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_RCC_OscConfig+0x4b4>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fd15 	bl	80011c4 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279e:	f7fe fd11 	bl	80011c4 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e064      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x452>
 80027bc:	e05c      	b.n	8002878 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_RCC_OscConfig+0x4b4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fcfe 	bl	80011c4 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027cc:	f7fe fcfa 	bl	80011c4 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e04d      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_RCC_OscConfig+0x4ac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x480>
 80027ea:	e045      	b.n	8002878 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e040      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40007000 	.word	0x40007000
 8002800:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_RCC_OscConfig+0x538>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d030      	beq.n	8002874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d129      	bne.n	8002874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d122      	bne.n	8002874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002834:	4013      	ands	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800283a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800283c:	4293      	cmp	r3, r2
 800283e:	d119      	bne.n	8002874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	3b01      	subs	r3, #1
 800284e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d10f      	bne.n	8002874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07b      	b.n	8002992 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d108      	bne.n	80028b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028aa:	d009      	beq.n	80028c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	61da      	str	r2, [r3, #28]
 80028b2:	e005      	b.n	80028c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe fa92 	bl	8000e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002944:	ea42 0103 	orr.w	r1, r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	f003 0104 	and.w	r1, r3, #4
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	f003 0210 	and.w	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002980:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_SPI_Transmit+0x22>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e126      	b.n	8002c0a <HAL_SPI_Transmit+0x270>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029c4:	f7fe fbfe 	bl	80011c4 <HAL_GetTick>
 80029c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d002      	beq.n	80029e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029da:	2302      	movs	r3, #2
 80029dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029de:	e10b      	b.n	8002bf8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_SPI_Transmit+0x52>
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d102      	bne.n	80029f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029f0:	e102      	b.n	8002bf8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2203      	movs	r2, #3
 80029f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a38:	d10f      	bne.n	8002a5a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d007      	beq.n	8002a78 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a80:	d14b      	bne.n	8002b1a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_SPI_Transmit+0xf6>
 8002a8a:	8afb      	ldrh	r3, [r7, #22]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d13e      	bne.n	8002b0e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	881a      	ldrh	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	1c9a      	adds	r2, r3, #2
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ab4:	e02b      	b.n	8002b0e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d112      	bne.n	8002aea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	881a      	ldrh	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	1c9a      	adds	r2, r3, #2
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ae8:	e011      	b.n	8002b0e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aea:	f7fe fb6b 	bl	80011c4 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d803      	bhi.n	8002b02 <HAL_SPI_Transmit+0x168>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d102      	bne.n	8002b08 <HAL_SPI_Transmit+0x16e>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b0c:	e074      	b.n	8002bf8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ce      	bne.n	8002ab6 <HAL_SPI_Transmit+0x11c>
 8002b18:	e04c      	b.n	8002bb4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_SPI_Transmit+0x18e>
 8002b22:	8afb      	ldrh	r3, [r7, #22]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d140      	bne.n	8002baa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	330c      	adds	r3, #12
 8002b32:	7812      	ldrb	r2, [r2, #0]
 8002b34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b4e:	e02c      	b.n	8002baa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d113      	bne.n	8002b86 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	330c      	adds	r3, #12
 8002b68:	7812      	ldrb	r2, [r2, #0]
 8002b6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b84:	e011      	b.n	8002baa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b86:	f7fe fb1d 	bl	80011c4 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d803      	bhi.n	8002b9e <HAL_SPI_Transmit+0x204>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d102      	bne.n	8002ba4 <HAL_SPI_Transmit+0x20a>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ba8:	e026      	b.n	8002bf8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1cd      	bne.n	8002b50 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	6839      	ldr	r1, [r7, #0]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fbe3 	bl	8003384 <SPI_EndRxTxTransaction>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	77fb      	strb	r3, [r7, #31]
 8002bf4:	e000      	b.n	8002bf8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002bf6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_SPI_Transmit_IT+0x20>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e06f      	b.n	8002d14 <HAL_SPI_Transmit_IT+0x100>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <HAL_SPI_Transmit_IT+0x34>
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c4c:	e05d      	b.n	8002d0a <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d002      	beq.n	8002c60 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c5e:	e054      	b.n	8002d0a <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2203      	movs	r2, #3
 8002c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	88fa      	ldrh	r2, [r7, #6]
 8002c7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <HAL_SPI_Transmit_IT+0x10c>)
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
 8002ca6:	e002      	b.n	8002cae <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_SPI_Transmit_IT+0x110>)
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb6:	d10f      	bne.n	8002cd8 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002ce6:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d008      	beq.n	8002d08 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e000      	b.n	8002d0a <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8002d08:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	0800322f 	.word	0x0800322f
 8002d24:	080031e9 	.word	0x080031e9

08002d28 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	4613      	mov	r3, r2
 8002d34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_SPI_Transmit_DMA+0x20>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e09b      	b.n	8002e80 <HAL_SPI_Transmit_DMA+0x158>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d002      	beq.n	8002d62 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d60:	e089      	b.n	8002e76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_SPI_Transmit_DMA+0x46>
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d72:	e080      	b.n	8002e76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2203      	movs	r2, #3
 8002d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	88fa      	ldrh	r2, [r7, #6]
 8002d92:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dba:	d10f      	bne.n	8002ddc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	4a29      	ldr	r2, [pc, #164]	; (8002e88 <HAL_SPI_Transmit_DMA+0x160>)
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de8:	4a28      	ldr	r2, [pc, #160]	; (8002e8c <HAL_SPI_Transmit_DMA+0x164>)
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	4a27      	ldr	r2, [pc, #156]	; (8002e90 <HAL_SPI_Transmit_DMA+0x168>)
 8002df2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df8:	2200      	movs	r2, #0
 8002dfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	4619      	mov	r1, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e14:	f7fe fbc6 	bl	80015a4 <HAL_DMA_Start_IT>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00c      	beq.n	8002e38 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	f043 0210 	orr.w	r2, r3, #16
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002e36:	e01e      	b.n	8002e76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b40      	cmp	r3, #64	; 0x40
 8002e44:	d007      	beq.n	8002e56 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e54:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0220 	orr.w	r2, r2, #32
 8002e64:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0202 	orr.w	r2, r2, #2
 8002e74:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	08003165 	.word	0x08003165
 8002e8c:	080030bd 	.word	0x080030bd
 8002e90:	08003181 	.word	0x08003181

08002e94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d004      	beq.n	8002ed8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
    return;
 8002ed6:	e0d7      	b.n	8003088 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_SPI_IRQHandler+0x66>
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	09db      	lsrs	r3, r3, #7
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4798      	blx	r3
    return;
 8002ef8:	e0c6      	b.n	8003088 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_SPI_IRQHandler+0x8c>
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80b4 	beq.w	8003088 <HAL_SPI_IRQHandler+0x1f4>
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80ad 	beq.w	8003088 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d023      	beq.n	8002f82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d011      	beq.n	8002f6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f043 0204 	orr.w	r2, r3, #4
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	e00b      	b.n	8002f82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	693b      	ldr	r3, [r7, #16]
        return;
 8002f80:	e082      	b.n	8003088 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d014      	beq.n	8002fb8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f043 0201 	orr.w	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00c      	beq.n	8002fde <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	f043 0208 	orr.w	r2, r3, #8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d04f      	beq.n	8003086 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ff4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d104      	bne.n	8003012 <HAL_SPI_IRQHandler+0x17e>
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d034      	beq.n	800307c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0203 	bic.w	r2, r2, #3
 8003020:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d011      	beq.n	800304e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	4a18      	ldr	r2, [pc, #96]	; (8003090 <HAL_SPI_IRQHandler+0x1fc>)
 8003030:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fb0c 	bl	8001654 <HAL_DMA_Abort_IT>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305a:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <HAL_SPI_IRQHandler+0x1fc>)
 800305c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe faf6 	bl	8001654 <HAL_DMA_Abort_IT>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800307a:	e003      	b.n	8003084 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f813 	bl	80030a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003082:	e000      	b.n	8003086 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003084:	bf00      	nop
    return;
 8003086:	bf00      	nop
  }
}
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	080031c1 	.word	0x080031c1

08003094 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ca:	f7fe f87b 	bl	80011c4 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030de:	d03b      	beq.n	8003158 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0220 	bic.w	r2, r2, #32
 80030ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0202 	bic.w	r2, r2, #2
 80030fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	2164      	movs	r1, #100	; 0x64
 8003104:	6978      	ldr	r0, [r7, #20]
 8003106:	f000 f93d 	bl	8003384 <SPI_EndRxTxTransaction>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2200      	movs	r2, #0
 800313e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003150:	6978      	ldr	r0, [r7, #20]
 8003152:	f7ff ffa9 	bl	80030a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003156:	e002      	b.n	800315e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003158:	6978      	ldr	r0, [r7, #20]
 800315a:	f7fd fb39 	bl	80007d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff ff8e 	bl	8003094 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0203 	bic.w	r2, r2, #3
 800319c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f043 0210 	orr.w	r2, r3, #16
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff ff78 	bl	80030a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff ff64 	bl	80030a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8f1 	bl	8003408 <SPI_CloseTx_ISR>
  }
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	881a      	ldrh	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	1c9a      	adds	r2, r3, #2
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f8cf 	bl	8003408 <SPI_CloseTx_ISR>
  }
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003284:	f7fd ff9e 	bl	80011c4 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4413      	add	r3, r2
 8003292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003294:	f7fd ff96 	bl	80011c4 <HAL_GetTick>
 8003298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	0d1b      	lsrs	r3, r3, #20
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032aa:	e054      	b.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d050      	beq.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032b4:	f7fd ff86 	bl	80011c4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d902      	bls.n	80032ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d13d      	bne.n	8003346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032e2:	d111      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ec:	d004      	beq.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f6:	d107      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003310:	d10f      	bne.n	8003332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e017      	b.n	8003376 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3b01      	subs	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d19b      	bne.n	80032ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000228 	.word	0x20000228

08003384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <SPI_EndRxTxTransaction+0x7c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <SPI_EndRxTxTransaction+0x80>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0d5b      	lsrs	r3, r3, #21
 800339c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033a0:	fb02 f303 	mul.w	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ae:	d112      	bne.n	80033d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2200      	movs	r2, #0
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff ff5a 	bl	8003274 <SPI_WaitFlagStateUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e00f      	b.n	80033f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	3b01      	subs	r3, #1
 80033e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	2b80      	cmp	r3, #128	; 0x80
 80033ee:	d0f2      	beq.n	80033d6 <SPI_EndRxTxTransaction+0x52>
 80033f0:	e000      	b.n	80033f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80033f2:	bf00      	nop
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000228 	.word	0x20000228
 8003404:	165e9f81 	.word	0x165e9f81

08003408 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003410:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <SPI_CloseTx_ISR+0xbc>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <SPI_CloseTx_ISR+0xc0>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	0a5b      	lsrs	r3, r3, #9
 800341c:	2264      	movs	r2, #100	; 0x64
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003424:	f7fd fece 	bl	80011c4 <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800343c:	e009      	b.n	8003452 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	3b01      	subs	r3, #1
 8003442:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0eb      	beq.n	800342a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003460:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	2164      	movs	r1, #100	; 0x64
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ff8c 	bl	8003384 <SPI_EndRxTxTransaction>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fdfb 	bl	80030a8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80034b2:	e002      	b.n	80034ba <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fd f98b 	bl	80007d0 <HAL_SPI_TxCpltCallback>
}
 80034ba:	bf00      	nop
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000228 	.word	0x20000228
 80034c8:	057619f1 	.word	0x057619f1

080034cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e041      	b.n	8003562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd fdae 	bl	8001054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f000 f9ce 	bl	80038ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d001      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e04e      	b.n	8003622 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a23      	ldr	r2, [pc, #140]	; (8003630 <HAL_TIM_Base_Start_IT+0xc4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d022      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ae:	d01d      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <HAL_TIM_Base_Start_IT+0xc8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d018      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1e      	ldr	r2, [pc, #120]	; (8003638 <HAL_TIM_Base_Start_IT+0xcc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d013      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_TIM_Base_Start_IT+0xd0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00e      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_TIM_Base_Start_IT+0xd4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a19      	ldr	r2, [pc, #100]	; (8003644 <HAL_TIM_Base_Start_IT+0xd8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a18      	ldr	r2, [pc, #96]	; (8003648 <HAL_TIM_Base_Start_IT+0xdc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d111      	bne.n	8003610 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d010      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360e:	e007      	b.n	8003620 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40010000 	.word	0x40010000
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	40000c00 	.word	0x40000c00
 8003640:	40010400 	.word	0x40010400
 8003644:	40014000 	.word	0x40014000
 8003648:	40001800 	.word	0x40001800

0800364c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d122      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b02      	cmp	r3, #2
 800366e:	d11b      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0202 	mvn.w	r2, #2
 8003678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8ee 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8e0 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8f1 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d122      	bne.n	80036fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d11b      	bne.n	80036fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0204 	mvn.w	r2, #4
 80036cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8c4 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8b6 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8c7 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b08      	cmp	r3, #8
 8003708:	d122      	bne.n	8003750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b08      	cmp	r3, #8
 8003716:	d11b      	bne.n	8003750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0208 	mvn.w	r2, #8
 8003720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2204      	movs	r2, #4
 8003726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f89a 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 800373c:	e005      	b.n	800374a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f88c 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f89d 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b10      	cmp	r3, #16
 800375c:	d122      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b10      	cmp	r3, #16
 800376a:	d11b      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0210 	mvn.w	r2, #16
 8003774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2208      	movs	r2, #8
 800377a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f870 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 8003790:	e005      	b.n	800379e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f862 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f873 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10e      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0201 	mvn.w	r2, #1
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd fa2a 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b80      	cmp	r3, #128	; 0x80
 80037dc:	d10e      	bne.n	80037fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	2b80      	cmp	r3, #128	; 0x80
 80037ea:	d107      	bne.n	80037fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f902 	bl	8003a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d10e      	bne.n	8003828 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d107      	bne.n	8003828 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f838 	bl	8003898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b20      	cmp	r3, #32
 8003834:	d10e      	bne.n	8003854 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b20      	cmp	r3, #32
 8003842:	d107      	bne.n	8003854 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0220 	mvn.w	r2, #32
 800384c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8cc 	bl	80039ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a40      	ldr	r2, [pc, #256]	; (80039c0 <TIM_Base_SetConfig+0x114>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d013      	beq.n	80038ec <TIM_Base_SetConfig+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ca:	d00f      	beq.n	80038ec <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a3d      	ldr	r2, [pc, #244]	; (80039c4 <TIM_Base_SetConfig+0x118>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00b      	beq.n	80038ec <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3c      	ldr	r2, [pc, #240]	; (80039c8 <TIM_Base_SetConfig+0x11c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d007      	beq.n	80038ec <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3b      	ldr	r2, [pc, #236]	; (80039cc <TIM_Base_SetConfig+0x120>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d003      	beq.n	80038ec <TIM_Base_SetConfig+0x40>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3a      	ldr	r2, [pc, #232]	; (80039d0 <TIM_Base_SetConfig+0x124>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d108      	bne.n	80038fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a2f      	ldr	r2, [pc, #188]	; (80039c0 <TIM_Base_SetConfig+0x114>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d02b      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390c:	d027      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <TIM_Base_SetConfig+0x118>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d023      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2b      	ldr	r2, [pc, #172]	; (80039c8 <TIM_Base_SetConfig+0x11c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01f      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a2a      	ldr	r2, [pc, #168]	; (80039cc <TIM_Base_SetConfig+0x120>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01b      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a29      	ldr	r2, [pc, #164]	; (80039d0 <TIM_Base_SetConfig+0x124>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d017      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <TIM_Base_SetConfig+0x128>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <TIM_Base_SetConfig+0x12c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00f      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a26      	ldr	r2, [pc, #152]	; (80039dc <TIM_Base_SetConfig+0x130>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00b      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a25      	ldr	r2, [pc, #148]	; (80039e0 <TIM_Base_SetConfig+0x134>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a24      	ldr	r2, [pc, #144]	; (80039e4 <TIM_Base_SetConfig+0x138>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a23      	ldr	r2, [pc, #140]	; (80039e8 <TIM_Base_SetConfig+0x13c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d108      	bne.n	8003970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <TIM_Base_SetConfig+0x114>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d003      	beq.n	80039a4 <TIM_Base_SetConfig+0xf8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <TIM_Base_SetConfig+0x124>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d103      	bne.n	80039ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	615a      	str	r2, [r3, #20]
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40000400 	.word	0x40000400
 80039c8:	40000800 	.word	0x40000800
 80039cc:	40000c00 	.word	0x40000c00
 80039d0:	40010400 	.word	0x40010400
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800
 80039e0:	40001800 	.word	0x40001800
 80039e4:	40001c00 	.word	0x40001c00
 80039e8:	40002000 	.word	0x40002000

080039ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <__libc_init_array>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	4d0d      	ldr	r5, [pc, #52]	; (8003a4c <__libc_init_array+0x38>)
 8003a18:	4c0d      	ldr	r4, [pc, #52]	; (8003a50 <__libc_init_array+0x3c>)
 8003a1a:	1b64      	subs	r4, r4, r5
 8003a1c:	10a4      	asrs	r4, r4, #2
 8003a1e:	2600      	movs	r6, #0
 8003a20:	42a6      	cmp	r6, r4
 8003a22:	d109      	bne.n	8003a38 <__libc_init_array+0x24>
 8003a24:	4d0b      	ldr	r5, [pc, #44]	; (8003a54 <__libc_init_array+0x40>)
 8003a26:	4c0c      	ldr	r4, [pc, #48]	; (8003a58 <__libc_init_array+0x44>)
 8003a28:	f000 f820 	bl	8003a6c <_init>
 8003a2c:	1b64      	subs	r4, r4, r5
 8003a2e:	10a4      	asrs	r4, r4, #2
 8003a30:	2600      	movs	r6, #0
 8003a32:	42a6      	cmp	r6, r4
 8003a34:	d105      	bne.n	8003a42 <__libc_init_array+0x2e>
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3c:	4798      	blx	r3
 8003a3e:	3601      	adds	r6, #1
 8003a40:	e7ee      	b.n	8003a20 <__libc_init_array+0xc>
 8003a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a46:	4798      	blx	r3
 8003a48:	3601      	adds	r6, #1
 8003a4a:	e7f2      	b.n	8003a32 <__libc_init_array+0x1e>
 8003a4c:	08003ee8 	.word	0x08003ee8
 8003a50:	08003ee8 	.word	0x08003ee8
 8003a54:	08003ee8 	.word	0x08003ee8
 8003a58:	08003eec 	.word	0x08003eec

08003a5c <memset>:
 8003a5c:	4402      	add	r2, r0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d100      	bne.n	8003a66 <memset+0xa>
 8003a64:	4770      	bx	lr
 8003a66:	f803 1b01 	strb.w	r1, [r3], #1
 8003a6a:	e7f9      	b.n	8003a60 <memset+0x4>

08003a6c <_init>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr

08003a78 <_fini>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	bf00      	nop
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr
